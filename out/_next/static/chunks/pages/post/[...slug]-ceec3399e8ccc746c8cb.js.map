{"version":3,"sources":["webpack://_N_E/./contentTypes/Post/PostSingle.tsx","webpack://_N_E/./lib/queries/api.tsx","webpack://_N_E/./lib/queries/pageBuilderQueries.tsx","webpack://_N_E/./lib/queries/pageQueries.tsx","webpack://_N_E/./lib/queries/postQueries.tsx","webpack://_N_E/./pages/404.js","webpack://_N_E/./pages/post/[...slug].tsx","webpack://_N_E/?c2ac"],"names":["props","headerImage","content","lang","title","title_en","site","widthLayout","categories","_headerTitle","_title","condition","wrapper","children","initialColor","navItems","navigation","items","data","className","photo","layout","usePage","slug","query","router","useRouter","isFallback","pageData","isError","usePreviewSubscription","params","initialData","enabled","preview","body","carouselHeroBlockQuery","categoriesBlockQuery","artworksBlockQuery","artistsBlockQuery","productsBlockQuery","postsBlockQuery","sectionBlockQuery","richTextQuery","MarqueeBlockQuery","page","postSingleView","imageMeta","window","__NEXT_P","push"],"mappings":"wKA0EA,IA3D8C,SAACA,GAAU,IAErDC,EAQED,EARFC,YACAC,EAOEF,EAPFE,QACAC,EAMEH,EANFG,KACAC,EAKEJ,EALFI,MACAC,EAIEL,EAJFK,SACAC,EAGEN,EAHFM,KAPqD,EAUnDN,EAFFO,mBARqD,SASrDC,EACER,EADFQ,WAGIC,EACJD,GAAcA,EAAW,GACZ,OAATL,EACEK,EAAW,GAAGH,SACdG,EAAW,GAAGJ,MAChB,cAEAM,EAAkB,OAATP,GAAiBE,EAAWA,EAAWD,EAEtD,OACE,+BACE,UAAC,KAAD,CACEO,UAAWJ,EACXK,QAAS,SAACC,GAAkB,MAC1B,OACE,SAAC,IAAD,CACEV,KAAMA,EACNW,aAAa,OACbV,MAAOK,EACPM,SAAQ,OAAET,QAAF,IAAEA,GAAF,UAAEA,EAAMU,kBAAR,aAAE,EAAkBC,MAC5BC,KAAMlB,EALR,SAOGa,KAXT,WAgBE,iBAAKM,UAAU,sCAAf,WACE,gBAAKA,UAAU,+DAAf,UACE,eAAIA,UAAU,qBAAd,SAAoCT,OAGtC,gBAAKS,UAAU,mBAAf,UACE,SAAC,IAAD,CACEA,UAAU,gBACVC,MAAOnB,EACPoB,OAAO,cAKZnB,IAAW,SAAC,IAAD,CAAYC,KAAMA,EAAMD,QAASA,W,6FCzDxCoB,EAAU,SAACtB,GAAwB,IACtCuB,EAAsBvB,EAAtBuB,KAAMC,EAAgBxB,EAAhBwB,MAAON,EAASlB,EAATkB,KAEfO,GAASC,iBAEf,OAAID,EAAOE,WACF,CAAEC,SAAU,KAAMC,SAAS,GAE/BX,EAUE,CAAEU,UANkBE,QAAuBN,EAAO,CACvDO,OAAQ,CAAER,QACVS,YAAad,EACbe,UAAWR,EAAOD,MAAMU,UAHlBhB,KAMWW,SAAS,GATnB,CAAED,SAAU,KAAMC,SAAS,K,yKCazBM,EAAO,2BAAH,OAGbC,IAHa,gBAIbC,IAJa,gBAKbC,IALa,gBAMbC,IANa,gBAObC,IAPa,gBAQbC,IARa,gBASbC,IATa,gBAUbC,IAVa,gBAWbC,IAXa,W,oHC0BJtC,GApCE,sDAAH,OAEqC6B,IAFrC,sGAEuIA,IAFvI,YAoCQ,wBASPU,EAAO,iCAAH,OAGfV,IAHe,aAIf7B,EAJe,O,gHC/DJwC,EAAiB,wKAAH,OAQGC,IARH,4CASIA,IATJ,iBAWzBZ,IAXyB,aAYzB7B,KAZyB,O,kEC6B3B,UA3BkB,WAChB,OAAO,mC,4XCOT,IAAMkB,EAAQ,yDAAH,OAEPsB,IAFO,U,KAsBX,UAhBqD,SAAC9C,GAAU,IACtDkB,EAAqBlB,EAArBkB,KAAMf,EAAeH,EAAfG,KAAMoB,EAASvB,EAATuB,KAD0C,GAEhCD,OAAQ,CAAEC,OAAMC,QAAON,SAA7CU,EAFsD,EAEtDA,SACR,OAH8D,EAE5CC,SACE,SAAC,UAAD,KAEb,SAAC,I,qWAAD,EAAY1B,KAAMA,GAAUyB,M,uBCzBhCoB,OAAOC,SAAWD,OAAOC,UAAY,IAAIC,KAAK,CAC7C,kBACA,WACE,OAAO,EAAQ,Y","file":"static/chunks/pages/post/[...slug]-ceec3399e8ccc746c8cb.js","sourcesContent":["import React from 'react'\n\nimport FridaImage from '@components/fridaImage/FridaImage'\nimport { PostPageResult } from '@lib/queries/postQueries'\nimport BodyParser from 'pageBuilder/BodyParser'\nimport { FridaLocation } from 'types'\nimport Section from '@components/Section'\nimport { ConditionalWrapper } from '@lib/helpers'\nimport Layout from '@components/generic/layout/layout'\n\ninterface PostSingleProps extends PostPageResult {\n  lang: FridaLocation\n  widthLayout?: boolean\n}\n\nconst PostSingle: React.FC<PostSingleProps> = (props) => {\n  const {\n    headerImage,\n    content,\n    lang,\n    title,\n    title_en,\n    site,\n    widthLayout = true,\n    categories,\n  } = props\n\n  const _headerTitle =\n    categories && categories[0]\n      ? lang === 'en'\n        ? categories[0].title_en\n        : categories[0].title\n      : 'no Category'\n\n  const _title = lang === 'en' && title_en ? title_en : title\n\n  return (\n    <>\n      <ConditionalWrapper\n        condition={widthLayout}\n        wrapper={(children: any) => {\n          return (\n            <Layout\n              lang={lang}\n              initialColor=\"pink\"\n              title={_headerTitle}\n              navItems={site?.navigation?.items}\n              data={props}\n            >\n              {children}\n            </Layout>\n          )\n        }}\n      >\n        <div className=\"flex h-vh flex-wrap  bg-frida-white\">\n          <div className=\"w-full  md:w-1/2 flex justify-center items-center p-20 mt-28\">\n            <h1 className=\"header-small pb-10\">{_title}</h1>\n          </div>\n\n          <div className=\"w-full  md:w-1/2\">\n            <FridaImage\n              className=\"w-full h-full\"\n              photo={headerImage}\n              layout=\"fill\"\n            />\n          </div>\n        </div>\n\n        {content && <BodyParser lang={lang} content={content} />}\n      </ConditionalWrapper>\n    </>\n  )\n}\n\nexport default PostSingle\n","import React from 'react'\nimport { getSanityClient, usePreviewSubscription } from '@lib/sanity'\nimport { useRouter } from 'next/router'\nimport { ParsedUrlQuery } from 'node:querystring'\n\ntype usePageProps = {\n  slug: string\n  query: string\n  data: any\n}\n\nexport const usePage = (props: usePageProps) => {\n  const { slug, query, data } = props\n\n  const router = useRouter()\n\n  if (router.isFallback) {\n    return { pageData: null, isError: true }\n  }\n  if (!data) {\n    return { pageData: null, isError: true }\n  }\n\n  const { data: pageData } = usePreviewSubscription(query, {\n    params: { slug },\n    initialData: data,\n    enabled: !!router.query.preview,\n  })\n\n  return { pageData, isError: false }\n}\n","import {\n  artistsBlockQuery,\n  ArtistsGalleryResult,\n} from 'pageBuilder/Blocks/ArtistsBlock'\nimport {\n  artworksBlockQuery,\n  ArtworksGalleryResult,\n} from 'pageBuilder/Blocks/ArtworkBlock'\nimport {\n  carouselHeroBlockQuery,\n  CarouselHeroResult,\n} from 'pageBuilder/Blocks/CarouselHeroBlock'\nimport { categoriesBlockQuery } from 'pageBuilder/Blocks/CategoryBlock'\nimport { MarqueeBlockQuery } from 'pageBuilder/Blocks/Marquee'\nimport {\n  postsBlockQuery,\n  PostsGalleryResult,\n} from 'pageBuilder/Blocks/PostsBlock'\nimport {\n  productsBlockQuery,\n  ProductsGalleryResult,\n} from 'pageBuilder/Blocks/ProductsBlock'\nimport {\n  sectionBlockQuery,\n  SectionResult,\n} from 'pageBuilder/Blocks/SectionBlock'\nimport { richTextQuery } from 'pageBuilder/RichText'\n\nexport type PageBuilderBlockBase = {\n  _type: string\n  _key: string\n}\n\nexport const body = `\ncontent[]{\n  ...,\n  ${carouselHeroBlockQuery},\n  ${categoriesBlockQuery},\n  ${artworksBlockQuery},\n  ${artistsBlockQuery},\n  ${productsBlockQuery},\n  ${postsBlockQuery},\n  ${sectionBlockQuery},\n  ${richTextQuery},\n  ${MarqueeBlockQuery}\n},\n`\n\nexport type PageBodyResult = (\n  | CarouselHeroResult\n  | ArtworksGalleryResult\n  | ArtistsGalleryResult\n  | PostsGalleryResult\n  | ProductsGalleryResult\n  | SectionResult\n)[]\n","import { getSanityClient } from '@lib/sanity'\nimport { FridaColors } from 'types'\nimport { PageBodyResult, body } from './pageBuilderQueries'\n\nconst navigation = `\n'navigation':*[_type == \"navigation\"][0]{\n  'items': item[]{\n    label,\n    label_en,\n    link,\n    'internalLink':internalLink->slug.current\n  }\n}\n`\nexport type NavigationResult = {\n  items: {\n    label: string\n    label_en: string | null\n    link: string | null\n    internalLink: string | null\n  }[]\n}\n\nconst footer = `\n\n'footer': select(defined(@.footer)=>@.footer->{${body}},!defined(@.footer)=>*[_type=='footer' && _id=='3667a872-9775-477c-b33b-09370c28524f'][0]{${body}}  )\n\n`\nexport type FooterResult = {\n  content: PageBodyResult\n}[]\n\nconst seo = `\n\"seo\": *[_type == \"seoSettings\"][0]{\n  siteTitle,\n  metaTitle,\n  metaDesc,\n  shareTitle,\n  shareDesc,\n  shareGraphic\n}\n`\n\nexport type SeoResult = {\n  siteTitle: string | null\n  metaTitle: string | null\n  metaDesc: string | null\n  shareTitle: string | null\n  shareDesc: string | null\n  shareGraphic: any | null\n}\n// export const site = `\n// 'site':{\n//   ${navigation},\n//   ${seo},\n//   ${footer}\n// }\n// `\n\nexport const site = `\n'site':'getSite'\n`\nexport type SiteResult = {\n  seo: SeoResult\n  navigation: NavigationResult\n  footer: FooterResult\n}\n\nexport const page = `\n...,\n'slug':slug.current,\n${body}\n${site}\n`\n\nexport type PageResult = {\n  content: PageBodyResult\n  title?: string\n  title_en?: string\n  slug: null | string\n  pageHeader?: null | {\n    initialPageTitleColor: FridaColors\n    hideMenu?: null | boolean\n    withOutHomeLink?: null | boolean\n  }\n  site: SiteResult\n}\n\nexport async function getIndexPage(pageData: string, preview: any) {\n  const query = `*[_type == 'indexPage'][0]{\n      ${page}\n    }\n  `\n  const data = await getSanityClient(preview).fetch(query)\n  return data\n}\n\nexport const getPage: (slug: string) => Promise<null | PageResult> = async (\n  slug: string\n) => {\n  const slugs = [`/${slug}`, slug, `/${slug}/`]\n\n  const query = `\n        *[_type == \"page\"  && slug.current in ${JSON.stringify(slugs)}][0]{\n         ${page}\n        }\n      `\n  const data = await getSanityClient().fetch(query)\n\n  return data\n}\n\nexport const extraData = async (data: any) => {\n  return data\n  // const _data = { ...data }\n  // if (data.content) {\n  //   _data.content = await Promise.all(\n  //     data.content.map(async (item: any) => {\n  //       if (item._type === 'artworks') {\n  //         const res = await fetch('http://localhost:3000/api/artworks')\n  //         const jsonRes = await res.json()\n  //         item.items = jsonRes\n  //         return item\n  //       }\n  //       return item\n  //     })\n  //   )\n  // }\n  // return _data\n}\n","import { getSanityClient } from '@lib/sanity'\nimport { PageBodyResult, body } from './pageBuilderQueries'\nimport { SiteResult, site } from './pageQueries'\nimport { imageMeta, ImageMetaResult } from './snippets'\n\nexport const postSingleView = `\ntitle,\ntitle_en,\n'createdAt':_createdAt,\n'categories':categories[]->{title,title_en},\n'slug':slug.current,\nexcerpt,\nexcerpt_en,\n'headerImage': headerImage {${imageMeta}},\n'previewImage':previewImage {${imageMeta}},\n\n${body}\n${site}\n`\n\nexport type PostPageResult = {\n  slug: string\n  title: string\n  title_en: string | null\n  excerpt: string | null\n  excerpt_en: string | null\n  categories: null | { title_en: string; title: string }[]\n  createdAt: null | string\n  headerImage: ImageMetaResult\n  previewImage: ImageMetaResult | null\n  content: null | PageBodyResult\n  site: SiteResult\n}\n\nexport const getPostPage = async (slug: string, preview: any) => {\n  const slugs = [`/${slug}`, slug, `/${slug}/`]\n\n  const query = `\n        *[_type == \"post\" && slug.current in ${JSON.stringify(slugs)}][0]{\n          ${postSingleView},\n        }\n      `\n  const data = await getSanityClient(preview).fetch(query)\n\n  return data as PostPageResult | null\n}\n","import React from 'react'\n\nimport Layout from '@components/layout'\nimport { getStaticPage, modules } from '@lib/api'\n\nimport { Module } from '@modules/index'\n\nconst ErrorPage = () => {\n  return <div>404</div>\n}\n\n// export async function getStaticProps({ preview, previewData }) {\n//   const pageData = await getStaticPage(\n//     `\n//     *[_type == \"errorPage\"] | order(_updatedAt desc)[0]{\n//       modules[]{\n//         ${modules}\n//       },\n//       seo\n//     }\n//   `,\n//     {\n//       active: preview,\n//       token: previewData?.token,\n//     }\n//   )\n\n//   return {\n//     props: {\n//       data: pageData,\n//     },\n//   }\n// }\n\nexport default ErrorPage\n","import { usePage } from '@lib/queries/api'\nimport { getAllDocPathsCached } from '@lib/queries/fetchDocPathApi'\nimport { handleStaticProps } from '@lib/queries/handleStaticProps'\nimport { PostPageResult, postSingleView } from '@lib/queries/postQueries'\nimport Error from '@pages/404'\nimport PostSingle from 'contentTypes/Post/PostSingle'\nimport { GetStaticPaths, GetStaticProps } from 'next'\nimport React from 'react'\nimport { FridaLocation } from 'types'\n\ntype PostTemplateProps = {\n  data: PostPageResult\n  lang: FridaLocation\n  slug: any\n}\nconst query = `\n*[_type == \"post\" && slug.current == $slug ][0]{\n  ${postSingleView},\n}\n`\n\nconst ArtworkTemplate: React.FC<PostTemplateProps> = (props) => {\n  const { data, lang, slug } = props\n  const { pageData, isError } = usePage({ slug, query, data })\n  if (isError) return <Error />\n\n  return <PostSingle lang={lang} {...pageData} />\n}\n\nexport const getStaticProps: GetStaticProps = async ({ params, locale }) => {\n  return await handleStaticProps({ params, locale, query })\n}\n\nexport const getStaticPaths: GetStaticPaths = async () => {\n  return await getAllDocPathsCached('post')\n}\n\nexport default ArtworkTemplate\n","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/post/[...slug]\",\n      function () {\n        return require(\"private-next-pages/post/[...slug].tsx\");\n      }\n    ]);\n  "],"sourceRoot":""}