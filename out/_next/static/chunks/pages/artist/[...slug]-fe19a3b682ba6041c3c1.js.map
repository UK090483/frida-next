{"version":3,"sources":["webpack://_N_E/./contentTypes/Artist/ArtistSingle.tsx","webpack://_N_E/./lib/queries/api.tsx","webpack://_N_E/./lib/queries/pageBuilderQueries.tsx","webpack://_N_E/./lib/queries/pageQueries.tsx","webpack://_N_E/./pages/404.js","webpack://_N_E/./pages/artist/[...slug].tsx","webpack://_N_E/?f1ab"],"names":["props","relatedArtworks","lang","description","description_en","webLink","instagramLink","name","_description","photo","layout","className","backgroundColor","label","type","link","color","length","header","items","map","item","usePage","slug","query","data","router","useRouter","isFallback","pageData","isError","usePreviewSubscription","params","initialData","enabled","preview","body","carouselHeroBlockQuery","categoriesBlockQuery","artworksBlockQuery","artistsBlockQuery","productsBlockQuery","postsBlockQuery","sectionBlockQuery","richTextQuery","MarqueeBlockQuery","site","page","artistSingleView","artworkCardQuery","title","navItems","navigation","window","__NEXT_P","push"],"mappings":"4ZA+EA,IAlEkD,SAACA,GAAU,MAEzDC,EAOED,EAPFC,gBACAC,EAMEF,EANFE,KACAC,EAKEH,EALFG,YACAC,EAIEJ,EAJFI,eACAC,EAGEL,EAHFK,QACAC,EAEEN,EAFFM,cACAC,EACEP,EADFO,KAGIC,EACK,OAATN,GAAiBE,EAAiBA,EAAiBD,EAErD,OACE,gCACGF,IACC,SAAC,IAAD,CACEQ,MAAK,UAAER,EAAgB,UAAlB,aAAE,EAAoBQ,MAC3BC,OAAO,OACPC,UAAU,iBAId,UAAC,IAAD,CAASA,UAAU,QAAQC,gBAAgB,QAA3C,WACE,gBAAID,UAAU,2CAAd,WACE,iBAAMA,UAAU,mBAAhB,mBACCJ,KAEFC,IAAgB,cAAGG,UAAU,kBAAb,SAAgCH,KACjD,iBAAKG,UAAU,mDAAf,UACGN,IACC,SAAC,IAAD,CACEQ,MAAM,UACNC,KAAK,eACLC,KAAMV,EACNW,MAAM,MACNJ,gBAAgB,QAChBD,UAAU,qBAGbL,IACC,SAAC,IAAD,CACEO,MAAM,YACNC,KAAK,eACLC,KAAMT,EACNU,MAAM,MACNJ,gBAAgB,QAChBD,UAAU,mBAMjBV,GAAmBA,EAAgBgB,OAAS,IAC3C,SAAC,IAAD,CACEC,OAAiB,OAAThB,EAAA,mBAA4BK,GAA5B,uBAAqDA,GAC7DY,MAAOlB,EAAgBmB,KAAI,SAACC,GAAD,OACzB,SAAC,I,qWAAD,EAAaP,KAAK,YAAeO,c,6FC5DhCC,EAAU,SAACtB,GAAwB,IACtCuB,EAAsBvB,EAAtBuB,KAAMC,EAAgBxB,EAAhBwB,MAAOC,EAASzB,EAATyB,KAEfC,GAASC,iBAEf,OAAID,EAAOE,WACF,CAAEC,SAAU,KAAMC,SAAS,GAE/BL,EAUE,CAAEI,UANkBE,QAAuBP,EAAO,CACvDQ,OAAQ,CAAET,QACVU,YAAaR,EACbS,UAAWR,EAAOF,MAAMW,UAHlBV,KAMWK,SAAS,GATnB,CAAED,SAAU,KAAMC,SAAS,K,yKCazBM,EAAO,2BAAH,OAGbC,IAHa,gBAIbC,IAJa,gBAKbC,IALa,gBAMbC,IANa,gBAObC,IAPa,gBAQbC,IARa,gBASbC,IATa,gBAUbC,IAVa,gBAWbC,IAXa,W,oHC0BJC,GApCE,sDAAH,OAEqCV,IAFrC,sGAEuIA,IAFvI,YAoCQ,wBASPW,EAAO,iCAAH,OAGfX,IAHe,aAIfU,EAJe,O,kEClCjB,UA3BkB,WAChB,OAAO,mC,yyBCOIE,EAAmB,4KAAH,OAQvBC,IARuB,iBAU3BH,KAV2B,MA8BvBtB,EAAQ,0EAAH,OAECwB,EAFD,wBAmCX,UA7BwD,SAAChD,GAAU,QACzDyB,EAAqBzB,EAArByB,KAAMvB,EAAeF,EAAfE,KAAMqB,EAASvB,EAATuB,KAD6C,GAEnCD,OAAQ,CAAEC,OAAMC,QAAOC,SAA7CI,EAFyD,EAEzDA,SAER,OAJiE,EAE/CC,SAGT,SAAC,UAAD,KAGP,+BACE,SAAC,IAAD,CACE5B,KAAMA,EACNgD,MAAOrB,EAAStB,MAAQ,GACxB4C,SAAQ,OAAEtB,QAAF,IAAEA,GAAF,UAAEA,EAAUiB,YAAZ,iBAAE,EAAgBM,kBAAlB,aAAE,EAA4BjC,MACtCM,KAAMI,EAJR,UAME,SAAC,IAAD,GAAc3B,KAAMA,GAAU2B,U,uBCjEjCwB,OAAOC,SAAWD,OAAOC,UAAY,IAAIC,KAAK,CAC7C,oBACA,WACE,OAAO,EAAQ,Y","file":"static/chunks/pages/artist/[...slug]-fe19a3b682ba6041c3c1.js","sourcesContent":["import FridaImage from '@components/fridaImage/FridaImage'\nimport React from 'react'\nimport { FridaLocation } from 'types'\nimport Carousel from '@components/Carousel'\nimport ArtworkCard from 'contentTypes/Artwork/ArtworkCard'\nimport Section from '@components/Section'\nimport Button from '@components/buttons/button'\nimport { ArtistPageResult } from '@pages/artist/[...slug]'\n\ninterface ArtistSingleProps extends ArtistPageResult {\n  lang: FridaLocation\n}\n\nconst ArtistSingle: React.FC<ArtistSingleProps> = (props) => {\n  const {\n    relatedArtworks,\n    lang,\n    description,\n    description_en,\n    webLink,\n    instagramLink,\n    name,\n  } = props\n\n  const _description =\n    lang === 'en' && description_en ? description_en : description\n\n  return (\n    <>\n      {relatedArtworks && (\n        <FridaImage\n          photo={relatedArtworks[1]?.photo}\n          layout=\"fill\"\n          className=\"h-vh w-full\"\n        />\n      )}\n\n      <Section className=\"pb-20\" backgroundColor=\"white\">\n        <h1 className=\"header-medium text-frida-pink pt-10 pb-8\">\n          <span className=\"text-frida-black\">#Meet</span>\n          {name}\n        </h1>\n        {_description && <p className=\"text-base-fluid\">{_description}</p>}\n        <div className=\"flex flex-wrap justify-center md:justify-start  \">\n          {webLink && (\n            <Button\n              label=\"Website\"\n              type=\"externalLink\"\n              link={webLink}\n              color=\"red\"\n              backgroundColor=\"white\"\n              className=\" md:mb-0 md:mr-3\"\n            />\n          )}\n          {instagramLink && (\n            <Button\n              label=\"Instagram\"\n              type=\"externalLink\"\n              link={instagramLink}\n              color=\"red\"\n              backgroundColor=\"white\"\n              className=\" md:mr-3\"\n            />\n          )}\n        </div>\n      </Section>\n\n      {relatedArtworks && relatedArtworks.length > 0 && (\n        <Carousel\n          header={lang === 'en' ? `Works by ${name}` : `Arbeiten von ${name}`}\n          items={relatedArtworks.map((item) => (\n            <ArtworkCard type=\"carousel\" {...item} />\n          ))}\n        />\n      )}\n    </>\n  )\n}\n\nexport default ArtistSingle\n","import React from 'react'\nimport { getSanityClient, usePreviewSubscription } from '@lib/sanity'\nimport { useRouter } from 'next/router'\nimport { ParsedUrlQuery } from 'node:querystring'\n\ntype usePageProps = {\n  slug: string\n  query: string\n  data: any\n}\n\nexport const usePage = (props: usePageProps) => {\n  const { slug, query, data } = props\n\n  const router = useRouter()\n\n  if (router.isFallback) {\n    return { pageData: null, isError: true }\n  }\n  if (!data) {\n    return { pageData: null, isError: true }\n  }\n\n  const { data: pageData } = usePreviewSubscription(query, {\n    params: { slug },\n    initialData: data,\n    enabled: !!router.query.preview,\n  })\n\n  return { pageData, isError: false }\n}\n","import {\n  artistsBlockQuery,\n  ArtistsGalleryResult,\n} from 'pageBuilder/Blocks/ArtistsBlock'\nimport {\n  artworksBlockQuery,\n  ArtworksGalleryResult,\n} from 'pageBuilder/Blocks/ArtworkBlock'\nimport {\n  carouselHeroBlockQuery,\n  CarouselHeroResult,\n} from 'pageBuilder/Blocks/CarouselHeroBlock'\nimport { categoriesBlockQuery } from 'pageBuilder/Blocks/CategoryBlock'\nimport { MarqueeBlockQuery } from 'pageBuilder/Blocks/Marquee'\nimport {\n  postsBlockQuery,\n  PostsGalleryResult,\n} from 'pageBuilder/Blocks/PostsBlock'\nimport {\n  productsBlockQuery,\n  ProductsGalleryResult,\n} from 'pageBuilder/Blocks/ProductsBlock'\nimport {\n  sectionBlockQuery,\n  SectionResult,\n} from 'pageBuilder/Blocks/SectionBlock'\nimport { richTextQuery } from 'pageBuilder/RichText'\n\nexport type PageBuilderBlockBase = {\n  _type: string\n  _key: string\n}\n\nexport const body = `\ncontent[]{\n  ...,\n  ${carouselHeroBlockQuery},\n  ${categoriesBlockQuery},\n  ${artworksBlockQuery},\n  ${artistsBlockQuery},\n  ${productsBlockQuery},\n  ${postsBlockQuery},\n  ${sectionBlockQuery},\n  ${richTextQuery},\n  ${MarqueeBlockQuery}\n},\n`\n\nexport type PageBodyResult = (\n  | CarouselHeroResult\n  | ArtworksGalleryResult\n  | ArtistsGalleryResult\n  | PostsGalleryResult\n  | ProductsGalleryResult\n  | SectionResult\n)[]\n","import { getSanityClient } from '@lib/sanity'\nimport { FridaColors } from 'types'\nimport { PageBodyResult, body } from './pageBuilderQueries'\n\nconst navigation = `\n'navigation':*[_type == \"navigation\"][0]{\n  'items': item[]{\n    label,\n    label_en,\n    link,\n    'internalLink':internalLink->slug.current\n  }\n}\n`\nexport type NavigationResult = {\n  items: {\n    label: string\n    label_en: string | null\n    link: string | null\n    internalLink: string | null\n  }[]\n}\n\nconst footer = `\n\n'footer': select(defined(@.footer)=>@.footer->{${body}},!defined(@.footer)=>*[_type=='footer' && _id=='3667a872-9775-477c-b33b-09370c28524f'][0]{${body}}  )\n\n`\nexport type FooterResult = {\n  content: PageBodyResult\n}[]\n\nconst seo = `\n\"seo\": *[_type == \"seoSettings\"][0]{\n  siteTitle,\n  metaTitle,\n  metaDesc,\n  shareTitle,\n  shareDesc,\n  shareGraphic\n}\n`\n\nexport type SeoResult = {\n  siteTitle: string | null\n  metaTitle: string | null\n  metaDesc: string | null\n  shareTitle: string | null\n  shareDesc: string | null\n  shareGraphic: any | null\n}\n// export const site = `\n// 'site':{\n//   ${navigation},\n//   ${seo},\n//   ${footer}\n// }\n// `\n\nexport const site = `\n'site':'getSite'\n`\nexport type SiteResult = {\n  seo: SeoResult\n  navigation: NavigationResult\n  footer: FooterResult\n}\n\nexport const page = `\n...,\n'slug':slug.current,\n${body}\n${site}\n`\n\nexport type PageResult = {\n  content: PageBodyResult\n  title?: string\n  title_en?: string\n  slug: null | string\n  pageHeader?: null | {\n    initialPageTitleColor: FridaColors\n    hideMenu?: null | boolean\n    withOutHomeLink?: null | boolean\n  }\n  site: SiteResult\n}\n\nexport async function getIndexPage(pageData: string, preview: any) {\n  const query = `*[_type == 'indexPage'][0]{\n      ${page}\n    }\n  `\n  const data = await getSanityClient(preview).fetch(query)\n  return data\n}\n\nexport const getPage: (slug: string) => Promise<null | PageResult> = async (\n  slug: string\n) => {\n  const slugs = [`/${slug}`, slug, `/${slug}/`]\n\n  const query = `\n        *[_type == \"page\"  && slug.current in ${JSON.stringify(slugs)}][0]{\n         ${page}\n        }\n      `\n  const data = await getSanityClient().fetch(query)\n\n  return data\n}\n\nexport const extraData = async (data: any) => {\n  return data\n  // const _data = { ...data }\n  // if (data.content) {\n  //   _data.content = await Promise.all(\n  //     data.content.map(async (item: any) => {\n  //       if (item._type === 'artworks') {\n  //         const res = await fetch('http://localhost:3000/api/artworks')\n  //         const jsonRes = await res.json()\n  //         item.items = jsonRes\n  //         return item\n  //       }\n  //       return item\n  //     })\n  //   )\n  // }\n  // return _data\n}\n","import React from 'react'\n\nimport Layout from '@components/layout'\nimport { getStaticPage, modules } from '@lib/api'\n\nimport { Module } from '@modules/index'\n\nconst ErrorPage = () => {\n  return <div>404</div>\n}\n\n// export async function getStaticProps({ preview, previewData }) {\n//   const pageData = await getStaticPage(\n//     `\n//     *[_type == \"errorPage\"] | order(_updatedAt desc)[0]{\n//       modules[]{\n//         ${modules}\n//       },\n//       seo\n//     }\n//   `,\n//     {\n//       active: preview,\n//       token: previewData?.token,\n//     }\n//   )\n\n//   return {\n//     props: {\n//       data: pageData,\n//     },\n//   }\n// }\n\nexport default ErrorPage\n","import Layout from '@components/generic/layout/layout'\nimport { usePage } from '@lib/queries/api'\nimport { getAllDocPathsCached } from '@lib/queries/fetchDocPathApi'\nimport { handleStaticProps } from '@lib/queries/handleStaticProps'\nimport { site, SiteResult } from '@lib/queries/pageQueries'\nimport Error from '@pages/404'\nimport ArtistSingle from 'contentTypes/Artist/ArtistSingle'\nimport {\n  artworkCardQuery,\n  ArtworkCardResult,\n} from 'contentTypes/Artwork/ArtworkCard'\nimport { GetStaticPaths, GetStaticProps } from 'next'\nimport React from 'react'\nimport { FridaLocation } from 'types'\n\nexport const artistSingleView = `\n'slug':slug.current,\n'name':anzeigeName,\ndescription,\ndescription_en,\nwebLink,\ninstagramLink,\n'relatedArtworks':*[_type == 'artwork' && references(^._id)]{\n    ${artworkCardQuery}\n},\n${site}\n`\n\nexport type ArtistPageResult = {\n  slug: string\n  name: string | null\n  description: string | null\n  description_en: string | null\n  webLink: string | null\n  instagramLink: string | null\n  relatedArtworks: ArtworkCardResult[]\n  site: SiteResult\n}\n\ntype ArtworkTemplateProps = {\n  data: ArtistPageResult\n  lang: FridaLocation\n  slug: string\n}\n\nconst query = `\n        *[_type == \"artist\" && slug.current == $slug][0]{\n          ${artistSingleView},\n        }\n      `\n\nconst ArtworkTemplate: React.FC<ArtworkTemplateProps> = (props) => {\n  const { data, lang, slug } = props\n  const { pageData, isError } = usePage({ slug, query, data })\n\n  if (isError) {\n    return <Error />\n  }\n  return (\n    <>\n      <Layout\n        lang={lang}\n        title={pageData.name || ''}\n        navItems={pageData?.site?.navigation?.items}\n        data={pageData}\n      >\n        <ArtistSingle lang={lang} {...pageData} />\n      </Layout>\n    </>\n  )\n}\n\nexport const getStaticProps: GetStaticProps = async ({ params, locale }) => {\n  return await handleStaticProps({ params, locale, query })\n}\n\nexport const getStaticPaths: GetStaticPaths = async () => {\n  return await getAllDocPathsCached('artist')\n}\n\nexport default ArtworkTemplate\n","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/artist/[...slug]\",\n      function () {\n        return require(\"private-next-pages/artist/[...slug].tsx\");\n      }\n    ]);\n  "],"sourceRoot":""}