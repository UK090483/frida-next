{"version":3,"sources":["webpack://_N_E/./node_modules/next/dist/build/polyfills/object-assign.js","webpack://_N_E/./pages/sitemap.xml.tsx","webpack://_N_E/?8134"],"names":["assign","Object","bind","module","exports","default","window","__NEXT_P","push"],"mappings":"8FAAa,IAAIA,EAAOC,OAAOD,OAAOE,KAAKD,QAAQE,EAAOC,QAAQJ,EAAOG,EAAOC,QAAQC,QAAQF,EAAOC,S,oGCavG,UARgB,WACd,OACE,uG,uBCNCE,OAAOC,SAAWD,OAAOC,UAAY,IAAIC,KAAK,CAC7C,eACA,WACE,OAAO,EAAQ,Y","file":"static/chunks/pages/sitemap.xml-91958612a44b24a34876.js","sourcesContent":["\"use strict\";var assign=Object.assign.bind(Object);module.exports=assign;module.exports.default=module.exports;\n//# sourceMappingURL=object-assign.js.map","import { GetServerSideProps } from 'next'\nimport { SitemapStream, streamToPromise } from 'sitemap'\nimport { createGzip } from 'zlib'\nimport { getAllDocSlugs } from '@lib/api'\n\nconst Sitemap = () => {\n  return (\n    <div>\n      Should not be navigated via Next Link. Use a standard {`<a>`} tag!\n    </div>\n  )\n}\n\nexport default Sitemap\n\nlet sitemap: Buffer | null = null\n\nconst addUrls = async (smStream: SitemapStream) => {\n  const allPages = await getAllDocSlugs('page')\n  const allCollections = await getAllDocSlugs('collection')\n\n  allPages &&\n    allPages.map((page) => {\n      smStream.write({\n        url: `/${page.slug}`,\n        changefreq: 'weekly',\n        priority: 0.8,\n      })\n    })\n\n  allCollections &&\n    allCollections.map((collection) => {\n      smStream.write({\n        url: `/${collection.slug}`,\n        changefreq: 'weekly',\n        priority: 0.7,\n      })\n    })\n}\n\nexport const getServerSideProps: GetServerSideProps = async ({ res, req }) => {\n  if (!req || !res) {\n    return {\n      props: {},\n    }\n  }\n  res.setHeader('Content-Type', 'application/xml')\n  res.setHeader('Content-Encoding', 'gzip')\n\n  // If our sitemap is cached, we write the cached sitemap, no query to the CMS.\n  if (sitemap) {\n    res.write(sitemap)\n    res.end()\n    return {\n      props: {},\n    }\n  }\n  const smStream = new SitemapStream({\n    hostname: `https://${req.headers.host}/`,\n  })\n  const pipeline = smStream.pipe(createGzip())\n\n  try {\n    smStream.write({ url: '/', changefreq: 'daily', priority: 1.0 })\n    smStream.write({ url: '/shop', changefreq: 'daily', priority: 0.9 })\n    await addUrls(smStream)\n    smStream.end()\n\n    const resp = await streamToPromise(pipeline)\n\n    sitemap = resp\n\n    res.write(resp)\n    res.end()\n  } catch (error) {\n    console.log(error)\n    res.statusCode = 500\n    res.write('Could not generate sitemap.')\n    res.end()\n  }\n\n  return {\n    props: {},\n  }\n}\n","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/sitemap.xml\",\n      function () {\n        return require(\"private-next-pages/sitemap.xml.tsx\");\n      }\n    ]);\n  "],"sourceRoot":""}